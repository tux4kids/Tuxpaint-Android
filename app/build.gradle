def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    namespace 'org.tuxpaint'
    compileSdkVersion 35
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-21"
                abiFilters 'arm64-v8a'
                // Add 16KB page size alignment support - use ldFlags instead of cFlags
                arguments "APP_LDFLAGS+=-Wl,-z,max-page-size=16384"
            }
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "store"
    productFlavors {
        playStore {
            if (buildAsApplication) {
                dimension "store"
                applicationId "org.tuxpaint.android"
                versionCode 9351
                versionName "0.9.35-1"
            }
        }
        offPlayStore {
            if (buildAsApplication) {
                dimension "store"
                applicationId "org.tuxpaint"
                versionCode 9350
                versionName "0.9.35"
            }
        }
    }
    androidResources {
        ignoreAssetsPattern 'nonexisting.file'
    }
    lint {
        abortOnError false
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
       
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

task copyDataFiles(type: Copy) {
    from('src/main/jni/tuxpaint/data') {
        include '**/*.*'
    }
    destinationDir(new File('src/main/assets/data'))
}
task copyConfigFile(type: Copy) {
    from 'src/main/jni/tuxpaint/src/tuxpaint.cfg-android'
    into 'src/main/assets/etc'
    rename 'tuxpaint.cfg-android', 'tuxpaint.cfg'
}

task compileLocaleFiles {
    description 'Compile .po files to .mo files for translations'
    
    def poDir = file('src/main/jni/tuxpaint/src/po')
    def assetsLocaleDir = file('src/main/assets/locale')
    
    inputs.dir poDir
    outputs.dir assetsLocaleDir
    
    doLast {
        // Create assets/locale directory if it doesn't exist
        assetsLocaleDir.mkdirs()
        
        // Compile each .po file to .mo
        fileTree(dir: poDir, include: '*.po').each { poFile ->
            def lang = poFile.name.take(poFile.name.lastIndexOf('.'))
            def moDir = file("${assetsLocaleDir}/${lang}/LC_MESSAGES")
            def moFile = file("${moDir}/tuxpaint.mo")
            
            // Create directory structure
            moDir.mkdirs()
            
            // Compile .po to .mo using msgfmt
            exec {
                commandLine 'msgfmt', poFile.absolutePath, '-o', moFile.absolutePath
                ignoreExitValue = true
            }
            
            if (moFile.exists()) {
                println "✓ Built ${lang}"
            } else {
                println "✗ Failed ${lang}"
            }
        }
    }
}

preBuild.dependsOn copyDataFiles,copyConfigFile,compileLocaleFiles

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.print:print:1.0.0"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    
    // Test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'junit:junit:4.13.2'
}