                                   Tux Paint
                                 version 0.9.28
                        Documentation sur l'installation

        Copyright ¬© 2002-2022 by divers contributeurs; see AUTHORS.txt.
                             https://tuxpaint.org/

                                  juin 4, 2022

           +--------------------------------------------------------+
           |Table des mati√®res                                      |
           |--------------------------------------------------------|
           |  * Exigences                                           |
           |       * Bilioth√®que Simple DirectMedia Layer (libSDL)  |
           |       * Autres biblioth√®ques                           |
           |  * Compilation et installation                         |
           |       * Windows                                        |
           |       * Linux/Unix                                     |
           |       * macOS                                          |
           |  * D√©bogage                                            |
           |  * D√©sinstallation de Tux Paint                        |
           |       * Windows                                        |
           |       * macOS                                          |
           |       * Linux                                          |
           +--------------------------------------------------------+

                                   Exigences

Bilioth√®que Simple DirectMedia Layer (libSDL)

   Tux Paint n√©cessite la biblioth√®que de couches DirectMedia simple
   (libSDL), une biblioth√®que de programmation multim√©dia Open Source
   disponible sous la Licence publique g√©n√©rale limit√©e GNU (LGPL).

   Avec libSDL, Tux Paint d√©pend d'un certain nombre d'autres biblioth√®ques
   'd'aide' SDL : SDL_Image (pour les fichiers graphiques), SDL_gfx (pour
   certaines fonctions graphiques, comme la rotation), SDL_TTF et (en option)
   SDL_Pango (pour la prise en charge des polices True Type) et,
   √©ventuellement, SDL_Mixer (pour les effets sonores).

   Linux/Unix

           Les biblioth√®ques SDL sont disponibles en tant que code source, ou
           en tant que paquets RPM ou Debian pour diverses distributions de
           Linux. Ils peuvent √™tre t√©l√©charg√©s √† partir de :

              * libSDL: http://www.libsdl.org/
              * SDL_Image: http://www.libsdl.org/projects/SDL_image/
              * SDL_gfx:
                https://www.ferzkopp.net/wordpress/2016/01/02/sdl_gfx-sdl2_gfx/
                (https://sourceforge.net/projects/sdlgfx/)
              * SDL_TTF: http://www.libsdl.org/projects/SDL_ttf/
              * SDL_Pango: http://sourceforge.net/projects/sdlpango/
                (optionnel)
              * SDL_Mixer: http://www.libsdl.org/projects/SDL_mixer/
                (optionnel)

           Elles sont aussi parmi les paquets inclus dans votre distribution
           (par ex. sur le media d'installation, ou via la maintenance de vos
           logiciels comme la commande apt de Debian).

           üí° Note: When installing libraries from packages, be sure to ALSO
           install the development versions of the packages. (For example,
           install both "SDL-1.2.4.rpm" and "SDL-1.2.4-devel.rpm".)

  Autres biblioth√®ques

   Tux Paint profite √©galement d'un certain nombre d'autres biblioth√®ques
   gratuites LGPL. Sous Linux, tout comme SDL, ils devraient √™tre soit d√©j√†
   install√©es, soit facilement disponibles avec votre distribution Linux.

   libPNG

           Tux Paint utilise le format PNG (Portable Network Graphics) pour
           ses fichiers de donn√©es. SDL_image n√©cessitera l'installation de
           libPNG.

           http://www.libpng.org/pub/png/libpng.html

   gettext

           Tux Paint utilise les param√®tres r√©gionaux de votre syst√®me avec
           la biblioth√®que "gettext" pour prendre en charge plusieurs langues
           (par exemple, l'espagnol). Vous aurez besoin d'installer la
           biblioth√®que de gettext.

           http://www.gnu.org/software/gettext/

   libpaper (Linux/Unix uniquement)

           Depuis Tux Paint 0.9.17, Tux Paint peut d√©terminer le format de
           papier par d√©faut (par exemple, A4 ou Lettre), ou peut √™tre invit√©
           √† utiliser un format particulier, ceci gr√¢ce √† libpaper.

           https://github.com/naota/libpaper

   FriBiDi

           Les outils "Texte" et "√âtiquette" de Tux Paint supportent les
           langues bidirectionnelles, gr√¢ce √† la biblioth√®que "FriBidi".

           http://fribidi.org/

   Support des graphismes SVG

           √Ä partir de Tux Paint 0.9.17, Tux Paint peut prendre en charge les
           images SVG (Scalable Vector Graphics) pour les tampons. Deux
           ensembles de biblioth√®ques sont pris en charge et le support SVG
           peut √™tre compl√®tement d√©sactiv√© (via "make SVG_LIB:==")

                librsvg-2 & libCairo2 (nouvelles biblioth√®ques)
                           * libRSVG 2: http://librsvg.sourceforge.net/
                           * Cairo 2: http://www.cairographics.org/
                           * Celles-ci d√©pendent aussi de :
                                * GdkPixbuf & GLib: http://www.gtk.org/
                                * Pango: http://www.pango.org/

                Anciennes biblioth√®ques
                           * libcairo1, libsvg1, & libsvg-cairo1:
                             http://www.cairographics.org/
                           * Celles-ci d√©pendent aussi de :
                                * libxml2:
                                  https://gitlab.gnome.org/GNOME/libxml2

   Fonction d'exportation de GIF anim√©s

           Pour prendre en compte l'exportation de GIF anim√©s (diaporama), la
           biblioth√®que "libimagequant" (issue du projet "pngquant" est
           n√©cessaire.

           https://github.com/ImageOptim/libimagequant

   Outils NetPBM (optionnel) ne sont plus utilis√©s par d√©faut

           üìú Sous Linux et Unix, les anciennes versions de Tux Paint
           utilisaient les outils NetPBM comme aide √† l'impression. (Un PNG
           est g√©n√©r√© par TuxPaint et converti en PostScript en utilisant en
           ligne de commande les outils NetPBM pngtopnm et pnmtops.)

           http://netpbm.sourceforge.net/

                          Compilation et installation

   Tux Paint est publi√© sous la licence publique g√©n√©rale GNU (GPL) (voir
   "COPYING.txt" pour plus de d√©tails), et donc le 'code source' du programme
   est disponible gratuitement.

Windows

   mai 16, 2022 Shin-ichi TOYAMA dolphin6k@wmail.plala.or.jp
   <dolphin6k@wmail.plala.or.jp>

  R√©glages pour compilation

   Depuis f√©vrier 2005 (√† partir de Tux Paint 0.9.15), le "Makefile" inclut
   la prise en charge de la construction sur un syst√®me Windows √† l'aide de
   MinGW/MSYS (https://sourceforge.net/projects/msys2/).

   Beaucoup d'outils et de biblioth√®ques sont n√©cessaires pour √©laborer Tux
   Paint. Le syst√®me de gestion de paquet "pacman" apporte une aide pour
   installer automatiquement, en r√©solvant les d√©pendances nombreuses.

   T√©l√©chargez le dernier environnement MSYS2 √† partir de
   https://sourceforge.net/projects/msys2/files/Base/ et installez-le o√π vous
   voulez (par d√©faut "C:\msys64")

   Ouvrez le shell MSYS2 via le "Menu de D√©marrage" ->"MSYS2 64bit" -> "MSTS2
   MSYS" et ex√©cutez la commande suivante (pressez [Entr√©e] ou [Retour] pour
   accepter par d√©faut toutes les questions) :

     pacman -Syu

   Ceci mettra √† jour tout le syst√®me et la fen√™tre de se fermera
   automatiquement. R√©p√©tez les √©tapes pr√©c√©dentes encore une fois pour
   finaliser le process restant de mise √† jour.

   Sous le shell MSYS2, ex√©cutez la commande suivante pour installer outils
   basiques pour le d√©veloppement :

     pacman -S make automake-wrapper autoconf-wrapper libtool git zip patch
     gperf

   Allez √† la prochaine section "cha√Ænes d'outils MinGW 64bit (x86_64) ", ou
   bien √† la section "cha√Ænes d'outils MinGW 32bit (i686)" si vous ne voulez
   qu'un environnement de travail 32bit.

            -------------------------------------------------------

    MinGW 64bit (x86_64) compiler and tools

   Sous le shell MSYS2, ex√©cutez la commande suivante pour installer 64bit
   compiler and basic development tools :

     pacman -S mingw-w64-x86_64-{gcc,pkgconf,ntldd-git}

   "ntldd" est un petit outil qui examine les fichiers ex√©cutables de windows
   en vue de lister les fichiers DLL (.dll) qui leur sont n√©cessaires. Le
   process de fabrication de Tux Paint pour fournir des fichiers binaires
   s'en sert pour trouver les fichiers .dll requis.

    64bit (x86_64) dependency libraries for Tux Paint and Tux Paint Config

   You can install tools and libraries required for compiling Tux Paint and
   Tux Paint Config on MSYS2/MINGW using "pacman" except for SDL_mixer,
   SDL_Pango and libunibreak.

   FLTK is a cross-platform GUI toolkit used by "Tux Paint Config". You can
   skip installing it if you are only building "Tux Paint".

     $ pacman -S mingw-w64-x86_64-SDL_{image,ttf,gfx}
     $ pacman -S mingw-w64-x86_64-libvorbis
     $ pacman -S mingw-w64-x86_64-librsvg
     $ pacman -S mingw-w64-x86_64-fribidi
     $ pacman -S mingw-w64-x86_64-libimagequant
     $ pacman -S mingw-w64-x86_64-fltk

   üí° Nota : Fermez l'interpr√©teur de commandes avant de passer √† la suite.

    Install SDL_mixer, SDL_Pango and libunibreak on the 64bit environment

   SDL_mixer, SDL_Pango and libunibreak should be installed manually.

   Cette fois-ci, utilisez le shell MinGW "64bit". Ouvrez le shell depuis le
   "Menu de D√©marrage" -> "MSYS2 64bit" -> "MSYS2 MinGW 64-bit"

      SDL_mixer

   T√©l√©charger fichier source de SDL_mixer-1.2.12 depuis SDL_mixer's page.

   Build and install SDL_mixer as follows.

     $ tar zxvf SDL_mixer-1.2.12.tar.gz
     $ cd SDL_mixer-1.2.12/
     $ ./configure --prefix=/mingw64 && make && make install

      SDL_Pango

   Tout d'abord, vous devrez pr√©parer l'archive source et un patch qui est
   requis, dans le m√™me r√©pertoire.
     * T√©l√©charger fichier source de SDL_Pango-0.1.2 depuis La page SDL_Pango
       sur Sourceforge.net.
     * T√©l√©charger un fichier patch depuis La page web de John Popplewell
       traitant des "instructions pour la compilation de Tux Paint -
       MinGW/MSYS". (Ceci ajoute une fonctionnalit√© suppl√©mentaire (requise)
       √† SDL_Pango.)

   Compiler et installer SDL_Pango comme suit.

     $ tar zxvf SDL_Pango-0.1.2.tar.gz
     $ cd SDL_Pango-0.1.2/
     $ patch -p0 < ../SDL_Pango-configure-extra-api.patch
     $ ./configure --prefix=/mingw64 && make && make install

      libunibreak

   libunibreak is required for compiling Tux Paint Config. You can skip
   installing it if you are only building "Tux Paint".

   You can fetch the source code from the git repositry and compile it as
   follows.

     $ git clone https://github.com/adah1972/libunibreak libunibreak
     $ cd libunibreak
     $ ./augogen.sh --prefix=/mingw64 && make && make install

   Aller √† la prochaine section "chaines d'outils MinGW 32bit (i686)", ou
   bien aller directement √† la section "ImageMagick" si vous n'avez besoin
   que d'un environnement de travail 64bit.

            -------------------------------------------------------

    MinGW 32bit (i686) compiler and tools

   Sous le shell MSYS2, ex√©cutez la commande suivante pour installer 32bit
   compiler and basic development tools :

     pacman -S mingw-w64-i686-{gcc,pkgconf,ntldd-git}

   "ntldd" est un petit outil qui examine les fichiers ex√©cutables de windows
   en vue de lister les fichiers DLL (.dll) qui leur sont n√©cessaires. Le
   process de fabrication de Tux Paint pour fournir des fichiers binaires
   s'en sert pour trouver les fichiers .dll requis.

    32bit (i686) dependency libraries for Tux Paint and Tux Paint Config

   You can install tools and libraries required for compiling Tux Paint and
   Tux Paint Config on MSYS2/MINGW using "pacman" except for SDL_mixer,
   SDL_Pango and libunibreak.

   FLTK is a cross-platform GUI toolkit used by "Tux Paint Config". You can
   skip installing it if you are only building "Tux Paint".

     $ pacman -S mingw-w64-i686-SDL_{image,ttf,gfx}
     $ pacman -S mingw-w64-i686-libvorbis
     $ pacman -S mingw-w64-i686-librsvg
     $ pacman -S mingw-w64-i686-fribidi
     $ pacman -S mingw-w64-i686-libimagequant
     $ pacman -S mingw-w64-i686-fltk

   üí° Nota : Fermez l'interpr√©teur de commandes avant de passer √† la suite.

    Install SDL_mixer, SDL_Pango and libunibreak on the 32bit environment

   SDL_mixer, SDL_Pango and libunibreak should be installed manually.

   Cette fois-ci, utilisez le shell MinGW "32bit". Ouvrez le shell depuis le
   "Menu de D√©marrage" -> "MSYS2 64bit" -> "MSYS2 MinGW 32-bit"

      SDL_mixer

   T√©l√©charger fichier source de SDL_mixer-1.2.12 depuis SDL_mixer's page.

   Build and install SDL_mixer as follows.

     $ tar zxvf SDL_mixer-1.2.12.tar.gz
     $ cd SDL_mixer-1.2.12/
     $ ./configure --prefix=/mingw32 && make && make install

      SDL_Pango

   Tout d'abord, vous devrez pr√©parer l'archive source et un patch qui est
   requis, dans le m√™me r√©pertoire.
     * T√©l√©charger fichier source de SDL_Pango-0.1.2 depuis La page SDL_Pango
       sur Sourceforge.net.
     * T√©l√©charger un fichier patch depuis La page web de John Popplewell
       traitant des "instructions pour la compilation de Tux Paint -
       MinGW/MSYS". (Ceci ajoute une fonctionnalit√© suppl√©mentaire (requise)
       √† SDL_Pango.)

   Compiler et installer SDL_Pango comme suit.

     $ tar zxvf SDL_Pango-0.1.2.tar.gz
     $ cd SDL_Pango-0.1.2/
     $ patch -p0 < ../SDL_Pango-configure-extra-api.patch
     $ ./configure --prefix=/mingw32 && make && make install

      libunibreak

   libunibreak is required for compiling Tux Paint Config. You can skip
   installing it if you are only building "Tux Paint".

   You can fetch the source code from the git repositry and compile it as
   follows.

     $ git clone https://github.com/adah1972/libunibreak libunibreak
     $ cd libunibreak
     $ ./augogen.sh --prefix=/mingw32 && make && make install

  ImageMagick

   ImageMagick est un ensemble d'outils en ligne de commande pour cr√©er,
   √©diter, composer ou convertir des images bitmap, et qui supporte un grand
   nombre de formats d'image. Tux Paint utilise deux fonctions ("convert" et
   "composite") pour g√©n√©rer des vignettes pour les images de d√©marrage et
   des mod√®les durant le process de compilation.

   L'utilisation des binaires officiels tir√©s de "Versions binaires pour
   Windows" est recommand√©e car les commandes install√©es avec "pacman" sur
   MinGW/MSYS ne fonctionnent pas comme elles devraient !

   N'oubliez pas de cocher "Installer les utilitaires h√©rit√©s (par ex.
   convert)" pour l'installation, car le processus de compilation de Tux
   Paint les utilise.

   Ajoutez le chemin o√π ImageMagick est install√© au d√©but de votre variable
   d'environnement "PATH". Par exemple :

     $ export PATH=/c/Program\ Files/ImageMagick-7.0.10-Q16-HDRI:$PATH

   Vous pouvez rendre ceci permanent en ajoutant ce qui pr√©c√®de √† votre
   fichier de configuration du shell BASH, "~/.bash_profile".

  Tux Paint

   Vous pouvez compiler des binaires 64bit en utilisant le shell MSYS2 64bit,
   et des binaires 32bit en utilisant le shell MSYS2 32bit.

     * Choisissez "MSYS2 64bit" -> "MSYS2 MinGW 64-bit" dans le "Menu de
       D√©marrage" pour ouvrir le shell 64bit.
     * Choisissez "MSYS2 64bit" -> "MSYS2 MinGW 32-bit" dans le "Menu de
       D√©marrage" pour ouvrir le shell 32bit.

   Compilez Tux Paint avec la commande suivante :

     $ make bdist-win32

   üí° Nota : √Ä ce stade, vous voudrez compiler "Tux Paint Config". Pour
   Windows, il peut √™tre ainsi inclus avec "Tux Paint", si vous faites une
   version officielle (ou de test).La compilation ira chercher un r√©pertoire
   nomm√© "tuxpaint-config" (sans num√©ro de version, par ex voir
   "tuxpaint-config-X.Y.Z"). Voir le fichier INSTALL.txt de "Tux Paint
   Config" pour les d√©tails.

   Tous les fichiers n√©cessaires pour d√©marrer Tux Paint (et Tux Paint
   Config) sont rassembl√©s dans le r√©pertoire de la distribution binaire
   "bdist", r√©pertoire situ√© sous "win323. Vous pouvez les d√©marrer en
   double-cliquant leurs fichiers ex√©ctutables (.exe) dans le r√©pertoire
   "bdist".

  Building the Tux Paint Windows Installer

   Inno Setup est utilis√© pour construire l'installeur ex√©cutable de Tux
   Paint. Vous devez donc l'installer en premier.

   Officiellement Inno Setup prend en compte des traductions dans environ 20
   langues. Cependant, un des points majeurs de Tux Paint est qu'il supporte
   beaucoup de langues. Aussi, le script de mise au point "tuxpaint.iss" qui
   sert pour construire le programme d'installation est √©crit en beaucoup
   plus de langues, y compris des non-officielles qui sont disponibles sur
   "Inno Setup Translations". Vous devez t√©l√©charger les fichiers de
   traduction (.isl) qui sont requis et les mettre dans le r√©pertoire
   "Languages" sous le r√©pertoire dans lequel Inno Setup est install√©.

   Before building an installer, edit the "tuxpaint.iss" file and enable one
   of the lines starting with "#define BuildTarget=", depending on the
   architecture of the installer you want to create.

   Alors, vous pouvez facilement construire un installateur ex√©cutable en
   cliquant-droit sur l'ic√¥ne "tuxpaint.iss" du r√©pertoires "win32" et
   s√©lectionner "Compile" dans la liste. Cela prendra un certain temps, et
   √©ventuellement vous obtiendrez un fichier
   "tuxpaint-X.Y.Z-windows-<arch>-installer.exe" dans le m√™me r√©pertoire.

  Running the Tux Paint Windows Installer

   Double-cliquez sur l'ex√©cutable du programme d'installation de Tux Paint
   (fichier .EXE) et suivez les instructions.

   First, you will be asked to read the license. (It is the GNU General
   Public License (GPL), which is also available as "COPYING.txt".)

   Il vous sera ensuite demand√© si vous souhaitez installer des raccourcis √†
   Tux Paint dans votre menu D√©marrer de Windows et sur votre bureau
   Windows.(Les deux options sont d√©finies par d√©faut.)

   Puis, il vous sera demand√© o√π vous souhaitez installer Tux Paint. La
   valeur par d√©faut devrait convenir, tant qu'il y a de l'espace disponible.
   Sinon, choisissez un autre emplacement.

   √Ä ce stade, vous pouvez cliquer sur ¬´Installer¬ª pour installer Tux Paint !

  Changing the Settings Using the Shortcut

   Pour modifier les param√®tres du programme, cliquez avec le bouton droit
   sur le raccourci TuxPaint et s√©lectionnez ¬´Propri√©t√©s¬ª (en bas).

   Assurez-vous que l'onglet "Raccourci" est s√©lectionn√© dans la fen√™tre qui
   appara√Æt et examinez le champ ¬´Cible:¬ª. Vous devriez voir quelque chose
   comme ceci :

     "C:\Program Files\TuxPaint\TuxPaint.exe"

   Vous pouvez maintenant ajouter des options de ligne de commande qui seront
   activ√©es lorsque vous double-cliquez sur l'ic√¥ne.

   Par exemple, pour faire fonctionner le jeu en mode plein √©cran, avec des
   formes simples (pas d'option de rotation) et en fran√ßais, ajoutez les
   options (apr√®s 'TuxPaint.exe'), comme ceci :

     "C:\Program Files\TuxPaint\TuxPaint.exe" -f -s --lang french

   (Voir ¬´README.txt¬ª pour une liste compl√®te des options de ligne de
   commande disponibles.)

   Si vous faites une erreur ou que tout dispara√Æt, utilisez [Control] + [Z]
   pour annuler ou appuyez simplement sur la touche [Esc] et la bo√Æte se
   fermera sans aucune modification (sauf si vous avez appuy√© sur le bouton
   "Appliquer" !).

   Quand vous avez fini, appuyez sur "OK".

  If Something Goes Wrong

   Si, lorsque vous double-cliquez sur le raccourci pour lancer le jeu, rien
   ne se passe, c'est probablement parce que certaines des options en lignes
   de commande sont erron√©es. Ouvrez un explorateur comme avant et recherchez
   un fichier appel√© "stderr.txt" dans le dossier TuxPaint.

   Il contiendra une description de ce qui n'allait pas. Habituellement, ce
   sera simplement d√ª √† une casse de caract√®re incorrecte (majuscule 'Z' √† la
   place de 'z' minuscule) ou un '-' (tiret) manquant (en trop).

Linux/Unix

  Compilation :

   üí° Note: Tux Paint does not use autoconf/automake, so there is no
   "./configure" script to run. Compiling should be straight-forward though,
   assuming everything Tux Paint needs is installed.

   Pour compiler le programme √† partir des sources, lancez simplement la
   commande suivante apr√®s une invite shell (par ex. "$") :

     $ make

  D√©sactivation du support SVG (donc des d√©pendances Cairo, libSVG, et
  svg-cairo)

   Pour d√©sactiver le support de SVG (par ex. si votre syst√®me n'a pas de
   biblioth√®que Cairo, ou d'autres choses dont SVG est d√©pendant), vous
   pouvez ex√©cuter "make" avec "SVG_LIB= SVG_CFLAGS= NOSVGFLAG=NOSVG" :

     $ make SVG_LIB= SVG_CFLAGS=

  D√©sactivation du support Pango (donc des d√©pendances Pango, Cairo, etc ...)

   üìú Avant la version 0.9.18, Tuxpaint utilisait la biblioth√®que libSDL_ttf
   pour g√©rer les fichiers utilisant les fontes True Type. Depuis la 09.18
   libSDL_Pango est utilis√©e, car il permet un meilleur support pour
   l'internationalisation. Cependant, si vous voulez d√©sactiver l'utilisation
   de SDL_Pango, vous pouvez le faire en ex√©cutant "make" avec
   "SDL_PANGO_LIB=" :

     $ make SDL_PANGO_LIB=

  Disabling Sound at Compile-time

   Si vous n'avez pas de carte son ou si vous pr√©f√©rez cr√©er le programme
   sans support sonore (et donc sans d√©pendance SDL_mixer), vous pouvez
   ex√©cuter "make" avec "SDL_MIXER_LIB=" comme param√®tre :

     $ make SDL_MIXER_LIB=

  Other options

   Diverses autres options (par exemple, les dossiers d'installation) peuvent
   √™tre remplac√©es; voir dans "Makefile" pour plus de d√©tails.

  If you get errors

   Si vous avez des erreurs lors de la compilation, assurez-vous d'avoir les
   biblioth√®ques ad√©quates install√©es (voir ci-dessus). Si vous utilisez les
   versions issues des paquets des biblioth√®ques (par exemple, les RPM sous
   RedHat ou les DEB sous Debian), assurez-vous d'avoir choisi √©galement les
   packages "-dev" ou "-devel" correspondants, sinon vous ne pourrez pas
   compiler Tux Paint (et d'autres programmes) provenant des sources !

  Installng

   En supposant qu'aucune erreur fatale ne se soit produite, vous pouvez
   maintenant installer le programme afin qu'il puisse √™tre ex√©cut√© par les
   utilisateurs du syst√®me. Par d√©faut, cela doit √™tre effectu√© par
   l'utilisateur "root" ("superutilisateur"). Passer √† "root" en tapant la
   commande :

     $ su

   Entrez le mot de passe de "root" √† l'invite. Vous devriez maintenant √™tre
   "root" (avec une invite comme "#"). Pour installer le programme et ses
   fichiers de donn√©es, tapez :

     # make install

   Pour finir, vous pouvez revenir sur votre compte utilisateur en sortant du
   compte superutilisateur :

     # exit

   Autre mani√®re : vous faites simplement utilisation de la commande "sudo"
   (par ex. sur Ubuntu) :

     $ sudo make install

   üí° Note: By default, "tuxpaint", the executable program, is placed in
   "/usr/local/bin/". The data files (images, sounds, etc.) are placed in
   "/usr/local/share/tuxpaint/".

    Changer o√π vont les fichiers

   Vous pouvez changer o√π iront les fichiers en d√©finissant des variables
   pour "Makefile" sur la ligne de commande. "DESTDIR" est utilis√© pour
   indiquer la sortie des r√©sultats de la compilation. "PREFIX" est la base
   o√π tous les autres fichiers iront et est d√©finie par d√©faut comme
   "/usr/local".

   Les autres variables sont :

   BIN_PREFIX
           O√π le binaire "tuxpaint" sera install√©. (Par d√©faut
           "$(PREFIX)/bin", par ex. "/usr/local/bin")

   DATA_PREFIX
           O√π les fichiers de donn√©es (sons, graphiques, pinceaux, tampons,
           fontes) iront, et o√π Tux Paint ira les chercher pour tourner
           (R√©gl√© √† "$(PREFIX)/share/tuxpaint")

   DOC_PREFIX
           O√π sera mise la documentation (les r√©pertoires "docs". 'R√©gl√© √†
           "$(PREFIX)/share/doc/tuxpaint")

   MAN_PREFIX
           O√π ira la page de manuel de Tuxpaint (R√©gl√© √†
           "$(PREFIX)/share/man")

   ICON_PREFIX ‚Äî $(PREFIX)/share/pixmaps

   X11_ICON_PREFIX ‚Äî $(PREFIX)/X11R6/include/X11/pixmaps

   GNOME_PREFIX ‚Äî $(PREFIX)/share/gnome/apps/Graphics

   KDE_PREFIX ‚Äî $(PREFIX)/share/applnk/Graphics
           O√π iront les ic√¥nes et les lanceurs (pour GNOME et KDE)

   LOCALE_PREFIX
           O√π iront les fichiers de traduction, et o√π Tux Paint ira les
           chercher. (R√©gl√© √† "$(PREFIX)/share/locale/") (la destination
           finale de la traduction sera dans le r√©pertoire de la locale (par
           ex "es" pour l'espagnol, dans le sous-r√©pertoire "LC_MESSAGES").

   üí° Note: This list is out of date. See "Makefile" and "Makefile-i18n" for a
   complete list.

macOS

   janvier 20, 2022 Mark Kim <markuskimius@gmail.com>

   Tux Paint 0.9.22, et avant, devrait √™tre construit avec Xcode IDE. √Ä
   partir de la version 0.9.23, cependant, Tux Paint pour macOS est construit
   comme si c'√©tait une application Linux.

  Pr√©requis

   Bien Tux Paint puisse √™tre construit sans Xcode IDE, ce dernier est
   toujours n√©cessaire. T√©l√©chargez le = partir de l' the App Store, et
   lancez le une fois pour accepter ses accords de licence. Vous pouvez aussi
   installer les outils de ligne de commande de Xcode en tapant la commande :

     xcode-select --install

   Construire Tux Paint n√©cessite plusieurs biblioth√®ques. Nous les
   installons √† partir de MacPorts quand c'est possible, sinon √† partir du
   code source. Installez MacPorts avec le chemin par d√©faut /opt/local
   suivant les instructions donn√©es sur leur site : https://www.macports.org/
     * ImageMagick
     * cairo
     * fribidi
     * lbzip2
     * libimagequant^*
     * libpaper
     * libpng
     * librsvg
     * libsdl
     * libsdl_image
     * libsdl_mixer
     * libsdl_pango
     * libsdl_ttf
     * libsdl_gfx
     * pkgconfig
     * zlib
   ... mais vous devriez installer tout paquet requis par la derni√®re version
   de Tux Paint.

   ^* Non disponible depuis MacPorts √† ce moment, voir ci-dessous.

    libimagequant

   libimagequant n'est pas disponible sur MacPorts √† cette heure. Il peut
   √™tre install√© sur /opt/local (comme pour MacPorts) pour la biblioth√®que
   devant √™tre incluse dans TuxPaint.dmg.

     $ sudo port install rust cargo
     $ git clone https://github.com/ImageOptim/libimagequant.git
     $ cd libimagequant/imagequant-sys
     $ cargo build --release # Must use cargo from MacPorts
     $ sudo make PREFIX=/opt/local install

   ATTENTION :Poss√©der des outils Unix √† c√¥t√© de MacPorts et Xcode, tels que
   Fink ou Brew, vous emp√™chera de cr√©er un programme portable. V"rifiez que
   Fink et Brew ne soient pas accessibles via votre environnement de travail.

  Comment construire

   Tapez simplement :

     % make
     % make install

   ... to create the TuxPaint.app application bundle that can be run in-place
   or copied to /Applications. To create the DMG file for distribution, use
   'make TuxPaint.dmg'.

   Additional steps may be required when building for the Apple Silicon. See
   "Building for Apple Silicon" below.

  Probl√®mes connus

     * Un binaire macOS construit sur une version sp√©cifique de macOS ne
       fonctionnera qu'avec cette version, ou une plus r√©cente. Pour
       s'assurer que Tux Paint puisse tourner sur la plus vieille version de
       macOS possible, construisez le sur la plus vieille version de macOS
       disponible. Au moment o√π nous √©crivons Tux Paint ne peut √™tre
       construit pour tourner sur macOS 10.7 ou plus r√©cent.

       Voyez "Vieilles Versions de macOS" ci-dessous pour les meilleures
       instructions pour obtenir, installer et construire Tux Paint sur des
       vieilles versions de macOS.

       Alternatively, Tux Paint and all of its library dependencies may be
       compiled with appropriate options to be runnable on older versions of
       macOS. These options are already set on Tux Paint, so only its
       dependencies (from MacPorts) need to be recompiled. See "Recompiling
       MacPorts" below for the instructions.

  Vieilles versions de macOS

   Quelques vieilles versions de macOS peuvent √™tre t√©l√©charg√©es sur la page
   d'aide d'Apple : https://support.apple.com/en-us/HT211683

   macOS for Intel CPU does allow dual booting of multiple versions of the
   OS, but it's safer and easier to install the old macOS onto a flash drive.
   Wherever you're installing it, the target drive's partitioniong scheme and
   partition type must match what the old macOS expects, so use the Disk
   Utility to partition and format the flash drive accordingly.

   Dual booting multiple versions of macOS for Apple Silicon has been so far
   unsuccessful. Instead of installing an older version of macOS for Apple
   Silicon to build Tux Paint to run on the old version of macOS for Apple
   Silicon, use the instructions found in the "Recompiling MacPorts" section
   to build Tux Paint to run on older versions of macOS for Apple Silicon.

   √Ä ce moment, l'ancienne version de macOS disponible sur le site d'Apple
   est la Yosemite 10.10, qui un partitionnement "GPT (GUID Partition Table)"
   au lieu de MBR, et "Mac OS Extended (Journalis√©)" comme type de partition
   au lieu du nouveau type APFS.

   Au lancement de l'installateur, si vous avez un message disant que macOD
   est trop vieux ou trop r√©cent pour √™tre install√©, un installateur bootable
   peut √™tre cr√©√© en suivant les instructions donn√©es ici :
   https://support.apple.com/en-mide/HT201372

   Une fois l'ancienne version de macOS install√©e, vous pouvez trouver que le
   Xcode du App Store est trop r√©cent pour tourner sur la version du vieux
   macOS. Des anciennes versions de Xcode peuvent √™tre t√©l√©charg√©es sur le
   site des d√©veloppeurs d'Apple dans une zone accessible apr√®s
   enregistrement gratuit : https://developer.apple.com/download/more/

   La liste des versions de macOS et de la derni√®re version de Xcode
   compatible avec celle-ci a √©t√© gentiment mise sur la page Wikipedia sur
   Xcode : https://en.wikipedia.org/wiki/Xcode#Table de comparaison des
   versions

   Comme Xcode a √©t√© install√© manuellement, vous pouvez sauter l'√©tape
   d'installation des outils de commande en terminal (ne pas ex√©cuter
   "xcode-select --install") mais alors vous compilez Tux Paint en utilisant
   les m√™mes √©tapes d√©crites auparavant dans ce document.

  Recompiling MacPorts

   To recompile MacPorts to be usable on older versions of macOS, set the
   following options in /opt/local/etc/macports/macports.conf:

     buildfromsource always
     macosx_deployment_target 10.10

   Then uninstall all MacPorts packages:

     $ sudo port -fp uninstall installed

   Then reinstall all MacPorts packages needed by Tux Paint. Also rebuild
   libimagequant using the updated Cargo package from MacPorts.

   As of this writing, all libraries Tux Paint requires from MacPorts can be
   recompiled in this manner to run on macOS 10.10 Yosemite and later on
   Intel CPUs, and macOS 11.0 Big Sur and later on Apple Silicon.
   Unfortunately, although MacPorts has the option to enable the building of
   universal libraries, several libraries Tux Paint require cannot be built
   as universal libraries so they can only be built to run natively on the
   hardware on which they were built. See "Building a Universal Binary" below
   for instructions on how to build Tux Paint as a Universal Binary.

  Building for Apple Silicon

   macOS for Applie Silicon requires all native Apple Silicon applications be
   signed, even if it is signed "ad-hoc" (anonymously). Because of this,
   compilers that produce native Apple Silicon applications sign all produced
   binaries and libraries as a part of the compilation process.^* However,
   the Tux Paint compilation process modifies the libraries to be modular
   (using install_name_tool) so they can be added into the application
   bundle, which has the unfortunate side effect of breaking the signature.
   This can be addressed by signing the application bundle ad-hoc (example
   below) or using your own Apple Developer Identity if you have one. The DMG
   file, if needed, must be created after signing the App Bundle so the DMG
   file is created with signed App Bundle:

     $ codesign -s - TuxPaint.app
     $ make TuxPaint.dmg

   ^* For more information on the code signing requirements on the Apple
   Silicon, see
   https://developer.apple.com/documentation/macos-release-notes/macos-big-sur-11_0_1-universal-apps-release-notes#:~:text=New%20in%20macOS,pass%20through%20Gatekeeper.

   If you get an error that the application bundle is already signed, remove
   it before signing::

     $ codesign --remove-signature TuxPaint.app

   If you plan to combine the Apple Silicon bundle with the Intel CPU bundle
   to produce the Universal bundle, the code signing must be done after they
   are combined. See "Building a Universal Binary" below.

  Building a Universal Binary

   To build Tux Paint as a Universal Binary, compile Tux Paint for the Intel
   CPU and the Apple Silicon separately first. Then rename the app bundle for
   the Intel CPU to TuxPaint-x86_64.app, and the bundle for the Apple Silicon
   to TuxPaint-arm64.app, copy the app bundle from the Intel machine to the
   Apple Silicon machine, then use the provided build-universal.sh script to
   combine the two application bundles as below. The produced bundle must be
   signed (see "Building for Apple Silicon" above for more details). The DMG
   file, if required, must be built after the signing:

     $ macos/build-universal.sh
     $ codesign -s - TuxPaint.app
     $ make TuxPaint.dmg

                                    D√©bogage

   ‚öô Le d√©bogage ‚Äî vers "STDOUT", avec Linux et Unix, vers un fichier
   "stdout.txt"avec Windows, et vers le fichier "/tmp/tuxpaint.log" avec
   macOS ‚Äî peut √™tre activ√© en d√©finissant "DEBUG" (et, si un mode verbeux
   est souhait√©, "VERBOSE") # define dans "src/debug.h, et en (re)compilant
   Tux Paint.

                          D√©sinstallation de Tux Paint

Windows

  Utilisation du d√©sinstalleur

   Si vous avez install√© les raccourcis du menu D√©marrer (par d√©faut),
   acc√©dez au dossier TuxPaint et s√©lectionnez "D√©sinstaller". Une bo√Æte
   s'affichera qui confirme que vous √™tes sur le point de d√©sinstaller Tux
   Paint et, si vous en √™tes certain et que vous souhaitez supprimer
   d√©finitivement Tux Paint, cliquez sur le bouton 'D√©sinstaller'.

   Quand c'est fini, cliquez sur "Fermer".

  En utilisant le panneau de configuration

   Il est √©galement possible d'utiliser l'entr√©e "TuxPaint (supprimer
   uniquement)" dans la Section Ajout / Suppression de programmes du Panneau
   de configuration.

macOS

   Enlevez "TuxPaint.app" du dossier "Applications". Les fichiers de donn√©es
   les fichiers de configuration, les tampons et les images sauvegard√©es
   peuvent √™tre trouv√©es dans "Biblioth√®que/Support d'Application/Tux Paint"
   (pour tous les utilisateurs) et "/Users/USERNAME/Library/Application
   Support/TuxPaint" pour les utilisateurs individuels.

Linux

   Dans le r√©pertoire source de Tux Paint (o√π vous avez compil√© Tux Paint),
   vous pouvez utiliser une cible "make uninstall" pour d√©sinstaller Tux
   Paint. Par d√©faut, cela doit √™tre fait par l'utilisateur "root"
   ("superutilisateur"), mais si vous avez install√© Tux Paint √† un autre
   endroit (par ex. en mettant "PREFIX=..." √† "make" et "make install", vous
   ne pourrez pas, et il faudra fournir les m√™mes r√©glages ici. (Voir <a
   href="#compiling-linux>les instructions d'installation ci-dessus pour plus
   d'informations.)
